---
resources:
# 1. Pulling source code
# ======================
# declare resources, Gave the resource a name ("source-code") and identified where the code lives. 
# when i deploy a pipeline, Concourse produces containers that "check" resources on a schedule for any changes that should trigger a pipeline.
- name: source-code
  type: git
  icon: github-circle
  source:
    uri: {{source-code-uri}}
    branch: master

# 3. Producing and publishing a container image (3. & 4.)
# ========================================================
# A pipeline that just run tests is kinda weird. I need to do something when tests pass. In my case, I wanted to generate a Docker image. 
# Another of the built-in Concourse resource types is "docker-image" which generates a container image and puts it into a registry. 
# Here's the resource definition that worked with Azure Container Registry:
# username: ((azure-registry-username)), password: ((azure-registry-password))
# From the Azure Portal => Azure Container Registry => "Access keys" => grabbed the Username and one of the passwords.
- name: azure-container-registry
  type: docker-image
  icon: docker
  source:
    repository: {{azure-container-registry-repository}}
    tag: latest
    username: {{azure-container-registry-username}}
    password: {{azure-container-registry-password}}

# list out jobs
jobs:
# 2. first job Running unit tests   
# =========================
# defined a job to execute unit tests.
# A job has a build plan. That build plan contains any of three things: 1. get steps (to retrieve a resource), 
# 2. put steps (to push something to a resource), 3.and task steps (to run a script). 
# Our job below has one get step (to retrieve source code), and one task (to execute the xUnit tests).

# Let's break it down. First, my "plan" gets the source-code resource, 
# then I set "trigger: true" Concourse will kick off this job whenever it detects a change in the source code.
# Next, my build plan has a "task" step. Tasks run in containers, so you need to choose a base image that runs the user-defined script. 
# I chose the MS-provided .NET Core image so that I'd be confident it had all the necessary .NET tooling installed. 
# Note that my task has an "input." Since tasks are like functions, they have inputs and outputs. 
# Anything I input into the task is mounted into the container and is available to any scripts. 
# So, by making the source-code an input, my shell script can party on the source code retrieved by Concourse.
# Finally, I embedded a short script that invokes the "dotnet test" command. 

# From the fly CLI, I deploy pipelines with the following command: fly -t rs set-pipeline -c azure-k8s-rev1.yml -p azure-k8s-rev1
# That command says to use the "rs" target (which points to a given Concourse instance), 
# use the YAML file holding the pipeline, and name this pipeline azure-k8s-rev1. 
# It deployed instantly, and looked like this in the Concourse web dashboard.
# piepline is [source-code]-----[run-unit-tests]

# After unpausing the pipeline so that it came alive, I saw the "run unit tests" job start running. 
# It's easy to view what a job is doing, and I saw that it loaded the container image from Microsoft, 
# mounted the source code, ran my script and turned "green" because all my tests passed.
# dotnet test anc-web-api-test/anc-web-api-test.csproj /p:CollectCoverage=true /p:CoverletOutputFormat=opencover
- name: run-unit-tests
  plan:
  - get: source-code
    trigger: true
  - task: first-task
    config: 
      platform: linux
      image_resource:
        type: docker-image
        source: 
            repository: mcr.microsoft.com/dotnet/core/sdk
            tag: {{dotnet-core-sdk-tag}}
      inputs:
      - name: source-code
      run:
          path: sh
          args:
          - -exec
          - |
            dotnet test {{source-code-test-proj-path}} /p:CollectCoverage=true /p:CoverletOutputFormat=opencover
            # dotnet tool install --global dotnet-sonarscanner --version 4.7.1
            # dotnet-sonarscanner begin /k:"anc-web-api" /d:sonar.host.url="http://localhost:9000" /d:sonar.login="88b2f1a53409ce7cd4bb0f7acf6c95113517853c"
            # dotnet build
  - task: code-analysis
    file: ((source-code-ci-folder))/analyze.yml
  
# 4. second job produces a container
# ==================================
# Notice that I "get" the source code again. I also set a "passed" attribute meaning this will only run if the unit test step completes successfully. 
# This is how you start chaining jobs together into a pipeline! Then I "put" into the registry. 
# Recall I generated a Dockerfile from within VSc, and here, I point to it. 
# The resource does a "docker build" with that Dockerfile, tags the resulting image as the "latest" one, and pushes to the registry.
# fly -t rs set-pipeline -c pipeline-ver3.yml -p pipeline-ver3 --load-vars-from "variables.yml"
# piepline is [source-code]-----[run-unit-tests]-----[source-code]-----[containerize-app]-----[azure-container-registry]
# After it completed, the "containerize app" job ran. When that was finished, I checked Azure Container Registry and saw a new repository one with image in it.
- name: containerize-app
  plan:
  - get: source-code
    trigger: true
    passed:
    - run-unit-tests
  - put: azure-container-registry
    params:
      build: ./source-code
      tag_as_latest: true