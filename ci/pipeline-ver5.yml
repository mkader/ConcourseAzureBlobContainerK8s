---
# Generating and storing a tarball (5., 6. & 7.)
# ==========================================
# 5. declare resource types
# ==========================
# Not every platform wants to run containers. Some platforms happily take your source code and run it. 
# So our pipeline should also generate a single artifact with all the published ASP.NET Core files.
# I wanted to store this blob in Azure Storage. Since Azure Storage isn't a built-in Concourse resource type, 
# For non-core resources, you have to declare the resource type in the pipeline YAML.
# A resource type declaration is fairly simple; it's just a type (often docker-image) and then the repo to get it from.
resource_types:
- name: azure-blobstore
  type: docker-image
  source:
    repository: pcfabr/azure-blobstore-resource

resources:
# 1. Pulling source code
# ======================
# declare resources, Gave the resource a name ("source-code") and identified where the code lives. 
# when i deploy a pipeline, Concourse produces containers that "check" resources on a schedule for any changes that should trigger a pipeline.
- name: source-code
  type: git
  icon: github-circle
  source:
    uri: {{source-code-uri}}
    branch: master

# 3. Producing and publishing a container image (3. & 4.)
# ========================================================
# A pipeline that just run tests is kinda weird. I need to do something when tests pass. In my case, I wanted to generate a Docker image. 
# Another of the built-in Concourse resource types is "docker-image" which generates a container image and puts it into a registry. 
# Here's the resource definition that worked with Azure Container Registry:
# username: ((azure-registry-username)), password: ((azure-registry-password))
# From the Azure Portal => Azure Container Registry => "Access keys" => grabbed the Username and one of the passwords.
- name: azure-container-registry
  type: docker-image
  icon: docker
  source:
    repository: {{azure-container-registry-repository}}
    tag: latest
    username: {{azure-container-registry-username}}
    password: {{azure-container-registry-password}}

# 6.  created for Azure Storage standard resource definition:
# ===========================================================
# storage_account_name: ((azure-storage-account-name)), storage_account_key: ((azure-storage-account-key)), container: ftcoreapp
# Here the "type" matches the resource type name I set earlier. 
# Then I set the credentials (retrieved from the "Access keys" section in the Azure Portal), container name (pre-created, 
# and the name of the file to upload. Regex is supported here too.
- name: azure-blobstore
  type: azure-blobstore
  icon: azure
  source:
    storage_account_name: {{azure-blobstore-storage-account-name}}
    storage_account_key: {{azure-blobstore-storage-account-key}}
    container: {{azure-blobstore-container-name}}
    versioned_file: {{azure-blobstore-versioned-file}}

# list out jobs
jobs:
# 2. first job Running unit tests   
# =========================
# defined a job to execute unit tests.
# A job has a build plan. That build plan contains any of three things: 1. get steps (to retrieve a resource), 
# 2. put steps (to push something to a resource), 3.and task steps (to run a script). 
# Our job below has one get step (to retrieve source code), and one task (to execute the xUnit tests).

# Let's break it down. First, my "plan" gets the source-code resource, 
# then I set "trigger: true" Concourse will kick off this job whenever it detects a change in the source code.
# Next, my build plan has a "task" step. Tasks run in containers, so you need to choose a base image that runs the user-defined script. 
# I chose the MS-provided .NET Core image so that I'd be confident it had all the necessary .NET tooling installed. 
# Note that my task has an "input." Since tasks are like functions, they have inputs and outputs. 
# Anything I input into the task is mounted into the container and is available to any scripts. 
# So, by making the source-code an input, my shell script can party on the source code retrieved by Concourse.
# Finally, I embedded a short script that invokes the "dotnet test" command. 

# From the fly CLI, I deploy pipelines with the following command: fly -t rs set-pipeline -c azure-k8s-rev1.yml -p azure-k8s-rev1
# That command says to use the "rs" target (which points to a given Concourse instance), 
# use the YAML file holding the pipeline, and name this pipeline azure-k8s-rev1. 
# It deployed instantly, and looked like this in the Concourse web dashboard.
# piepline is [source-code]-----[run-unit-tests]

# After unpausing the pipeline so that it came alive, I saw the "run unit tests" job start running. 
# It's easy to view what a job is doing, and I saw that it loaded the container image from Microsoft, 
# mounted the source code, ran my script and turned "green" because all my tests passed.
- name: run-unit-tests
  plan:
  - get: source-code
    trigger: true
  - task: first-task
    config: 
      platform: linux
      image_resource:
        type: docker-image
        source: 
            repository: mcr.microsoft.com/dotnet/core/sdk
            tag: {{dotnet-core-sdk-tag}}
      inputs:
      - name: source-code
      run:
          path: sh
          args:
          - -exec
          - |
            dotnet test {{source-code-test-proj-path}}

# 4. second job produces a container
# ==================================
# Notice that I "get" the source code again. I also set a "passed" attribute meaning this will only run if the unit test step completes successfully. 
# This is how you start chaining jobs together into a pipeline! Then I "put" into the registry. 
# Recall I generated a Dockerfile from within VSc, and here, I point to it. 
# The resource does a "docker build" with that Dockerfile, tags the resulting image as the "latest" one, and pushes to the registry.
# piepline is [source-code]-----[run-unit-tests]-----[source-code]-----[containerize-app]-----[azure-container-registry]
# After it completed, the "containerize app" job ran. When that was finished, I checked Azure Container Registry and saw a new repository one with image in it.
- name: containerize-app
  plan:
  - get: source-code
    trigger: true
    passed:
    - run-unit-tests
  - put: azure-container-registry
    params:
      build: ./source-code
      tag_as_latest: true

# 7. third job bundles code and uploads it
# ========================================
# Finally, I added a new job that takes source code, runs a "publish" command, and creates a tarball from the result.
# Note that this job is also triggered when unit tests succeed. But it's not connected to the containerization job, so it runs in parallel. 
# Also note that in addition to an input, I also have outputs defined on the task. 
# This generates folders that are visible to subsequent steps in the job. 
# I dropped the tarball into the "artifact-repo" folder, and then "put" that file into Azure Blob Storage
# piepline is [source-code]-----[run-unit-tests]-----[source-code]-----[containerize-app]-----[azure-container-registry]
#                                                               V------[package-app]-----[azure-blobstore]    
# I After the pipeline finished, I had another updated container image in Azure Container Registry and a file sitting in Azure Storage.
# error 2019/10/04 13:20:52 failed to upload blob: open /tmp/build/put/artifact-repo/"anc-web-api.tar.gz": no such file or directory, if i pass artifact-repo/{{azure-blobstore-versioned-file}}
# error will go away if i pass artifact-repo/((azure-blobstore-versioned-file))   
- name: package-app
  plan:
  - get: source-code
    trigger: true
    passed:
    - run-unit-tests
  - task: first-task
    config:
      platform: linux
      image_resource:
        type: docker-image
        source: 
            repository: mcr.microsoft.com/dotnet/core/sdk
            tag: {{dotnet-core-sdk-tag}}
      inputs:
      - name: source-code
      outputs:
      - name: compiled-app
      - name: artifact-repo
      run:
          path: sh
          args:
          - -exec
          - |
            dotnet publish {{source-code-api-proj-path}} -o .././compiled-app
            tar -czvf ./artifact-repo/{{azure-blobstore-versioned-file}} ./compiled-app
            ls
  - put: azure-blobstore
    params:
      file: artifact-repo/((azure-blobstore-versioned-file))

